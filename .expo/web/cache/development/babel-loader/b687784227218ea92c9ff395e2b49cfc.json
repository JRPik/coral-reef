{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar BatchedBridge = require(\"./BatchedBridge\");\n\nvar invariant = require('invariant');\n\nfunction genModule(config, moduleID) {\n  if (!config) {\n    return null;\n  }\n\n  var _config = _slicedToArray(config, 5),\n      moduleName = _config[0],\n      constants = _config[1],\n      methods = _config[2],\n      promiseMethods = _config[3],\n      syncMethods = _config[4];\n\n  invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), \"Module name prefixes should've been stripped by the native side \" + \"but wasn't for \" + moduleName);\n\n  if (!constants && !methods) {\n    return {\n      name: moduleName\n    };\n  }\n\n  var module = {};\n  methods && methods.forEach(function (methodName, methodID) {\n    var isPromise = promiseMethods && arrayContains(promiseMethods, methodID) || false;\n    var isSync = syncMethods && arrayContains(syncMethods, methodID) || false;\n    invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');\n    var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';\n    module[methodName] = genMethod(moduleID, methodID, methodType);\n  });\n\n  _extends(module, constants);\n\n  if (module.getConstants == null) {\n    module.getConstants = function () {\n      return constants || Object.freeze({});\n    };\n  } else {\n    console.warn(\"Unable to define method 'getConstants()' on NativeModule '\" + moduleName + \"'. NativeModule '\" + moduleName + \"' already has a constant or method called 'getConstants'. Please remove it.\");\n  }\n\n  if (__DEV__) {\n    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);\n  }\n\n  return {\n    name: moduleName,\n    module: module\n  };\n}\n\nglobal.__fbGenNativeModule = genModule;\n\nfunction loadModule(name, moduleID) {\n  invariant(global.nativeRequireModuleConfig, \"Can't lazily create module without nativeRequireModuleConfig\");\n  var config = global.nativeRequireModuleConfig(name);\n  var info = genModule(config, moduleID);\n  return info && info.module;\n}\n\nfunction genMethod(moduleID, methodID, type) {\n  var fn = null;\n\n  if (type === 'promise') {\n    fn = function promiseMethodWrapper() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var enqueueingFrameError = new Error();\n      return new Promise(function (resolve, reject) {\n        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {\n          return resolve(data);\n        }, function (errorData) {\n          return reject(updateErrorWithErrorData(errorData, enqueueingFrameError));\n        });\n      });\n    };\n  } else {\n    fn = function nonPromiseMethodWrapper() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var lastArg = args.length > 0 ? args[args.length - 1] : null;\n      var secondLastArg = args.length > 1 ? args[args.length - 2] : null;\n      var hasSuccessCallback = typeof lastArg === 'function';\n      var hasErrorCallback = typeof secondLastArg === 'function';\n      hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');\n      var onSuccess = hasSuccessCallback ? lastArg : null;\n      var onFail = hasErrorCallback ? secondLastArg : null;\n      var callbackCount = hasSuccessCallback + hasErrorCallback;\n      var newArgs = args.slice(0, args.length - callbackCount);\n\n      if (type === 'sync') {\n        return BatchedBridge.callNativeSyncHook(moduleID, methodID, newArgs, onFail, onSuccess);\n      } else {\n        BatchedBridge.enqueueNativeCall(moduleID, methodID, newArgs, onFail, onSuccess);\n      }\n    };\n  }\n\n  fn.type = type;\n  return fn;\n}\n\nfunction arrayContains(array, value) {\n  return array.indexOf(value) !== -1;\n}\n\nfunction updateErrorWithErrorData(errorData, error) {\n  return _extends(error, errorData || {});\n}\n\nvar NativeModules = {};\n\nif (global.nativeModuleProxy) {\n  NativeModules = global.nativeModuleProxy;\n} else if (!global.nativeExtensions) {\n  var bridgeConfig = global.__fbBatchedBridgeConfig;\n  invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');\n\n  var defineLazyObjectProperty = require(\"../Utilities/defineLazyObjectProperty\");\n\n  (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {\n    var info = genModule(config, moduleID);\n\n    if (!info) {\n      return;\n    }\n\n    if (info.module) {\n      NativeModules[info.name] = info.module;\n    } else {\n      defineLazyObjectProperty(NativeModules, info.name, {\n        get: function get() {\n          return loadModule(info.name, moduleID);\n        }\n      });\n    }\n  });\n}\n\nmodule.exports = NativeModules;","map":{"version":3,"sources":["D:/Senior Design/coral-reef/node_modules/react-native/Libraries/BatchedBridge/NativeModules.js"],"names":["BatchedBridge","require","invariant","genModule","config","moduleID","moduleName","constants","methods","promiseMethods","syncMethods","startsWith","name","module","forEach","methodName","methodID","isPromise","arrayContains","isSync","methodType","genMethod","getConstants","Object","freeze","console","warn","__DEV__","createDebugLookup","global","__fbGenNativeModule","loadModule","nativeRequireModuleConfig","info","type","fn","promiseMethodWrapper","args","enqueueingFrameError","Error","Promise","resolve","reject","enqueueNativeCall","data","errorData","updateErrorWithErrorData","nonPromiseMethodWrapper","lastArg","length","secondLastArg","hasSuccessCallback","hasErrorCallback","onSuccess","onFail","callbackCount","newArgs","slice","callNativeSyncHook","array","value","indexOf","error","NativeModules","nativeModuleProxy","nativeExtensions","bridgeConfig","__fbBatchedBridgeConfig","defineLazyObjectProperty","remoteModuleConfig","get","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst BatchedBridge = require('./BatchedBridge');\n\nconst invariant = require('invariant');\n\nimport type {ExtendedError} from '../Core/Devtools/parseErrorStack';\n\nexport type ModuleConfig = [\n  string /* name */,\n  ?{...} /* constants */,\n  ?$ReadOnlyArray<string> /* functions */,\n  ?$ReadOnlyArray<number> /* promise method IDs */,\n  ?$ReadOnlyArray<number> /* sync method IDs */,\n];\n\nexport type MethodType = 'async' | 'promise' | 'sync';\n\nfunction genModule(\n  config: ?ModuleConfig,\n  moduleID: number,\n): ?{\n  name: string,\n  module?: {...},\n  ...\n} {\n  if (!config) {\n    return null;\n  }\n\n  const [moduleName, constants, methods, promiseMethods, syncMethods] = config;\n  invariant(\n    !moduleName.startsWith('RCT') && !moduleName.startsWith('RK'),\n    \"Module name prefixes should've been stripped by the native side \" +\n      \"but wasn't for \" +\n      moduleName,\n  );\n\n  if (!constants && !methods) {\n    // Module contents will be filled in lazily later\n    return {name: moduleName};\n  }\n\n  const module = {};\n  methods &&\n    methods.forEach((methodName, methodID) => {\n      const isPromise =\n        (promiseMethods && arrayContains(promiseMethods, methodID)) || false;\n      const isSync =\n        (syncMethods && arrayContains(syncMethods, methodID)) || false;\n      invariant(\n        !isPromise || !isSync,\n        'Cannot have a method that is both async and a sync hook',\n      );\n      const methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';\n      module[methodName] = genMethod(moduleID, methodID, methodType);\n    });\n\n  Object.assign(module, constants);\n\n  if (module.getConstants == null) {\n    module.getConstants = () => constants || Object.freeze({});\n  } else {\n    console.warn(\n      `Unable to define method 'getConstants()' on NativeModule '${moduleName}'. NativeModule '${moduleName}' already has a constant or method called 'getConstants'. Please remove it.`,\n    );\n  }\n\n  if (__DEV__) {\n    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);\n  }\n\n  return {name: moduleName, module};\n}\n\n// export this method as a global so we can call it from native\nglobal.__fbGenNativeModule = genModule;\n\nfunction loadModule(name: string, moduleID: number): ?{...} {\n  invariant(\n    global.nativeRequireModuleConfig,\n    \"Can't lazily create module without nativeRequireModuleConfig\",\n  );\n  const config = global.nativeRequireModuleConfig(name);\n  const info = genModule(config, moduleID);\n  return info && info.module;\n}\n\nfunction genMethod(moduleID: number, methodID: number, type: MethodType) {\n  let fn = null;\n  if (type === 'promise') {\n    fn = function promiseMethodWrapper(...args: Array<mixed>) {\n      // In case we reject, capture a useful stack trace here.\n      const enqueueingFrameError: ExtendedError = new Error();\n      return new Promise((resolve, reject) => {\n        BatchedBridge.enqueueNativeCall(\n          moduleID,\n          methodID,\n          args,\n          data => resolve(data),\n          errorData =>\n            reject(\n              updateErrorWithErrorData(\n                (errorData: $FlowFixMe),\n                enqueueingFrameError,\n              ),\n            ),\n        );\n      });\n    };\n  } else {\n    fn = function nonPromiseMethodWrapper(...args: Array<mixed>) {\n      const lastArg = args.length > 0 ? args[args.length - 1] : null;\n      const secondLastArg = args.length > 1 ? args[args.length - 2] : null;\n      const hasSuccessCallback = typeof lastArg === 'function';\n      const hasErrorCallback = typeof secondLastArg === 'function';\n      hasErrorCallback &&\n        invariant(\n          hasSuccessCallback,\n          'Cannot have a non-function arg after a function arg.',\n        );\n      // $FlowFixMe[incompatible-type]\n      const onSuccess: ?(mixed) => void = hasSuccessCallback ? lastArg : null;\n      // $FlowFixMe[incompatible-type]\n      const onFail: ?(mixed) => void = hasErrorCallback ? secondLastArg : null;\n      const callbackCount = hasSuccessCallback + hasErrorCallback;\n      const newArgs = args.slice(0, args.length - callbackCount);\n      if (type === 'sync') {\n        return BatchedBridge.callNativeSyncHook(\n          moduleID,\n          methodID,\n          newArgs,\n          onFail,\n          onSuccess,\n        );\n      } else {\n        BatchedBridge.enqueueNativeCall(\n          moduleID,\n          methodID,\n          newArgs,\n          onFail,\n          onSuccess,\n        );\n      }\n    };\n  }\n  fn.type = type;\n  return fn;\n}\n\nfunction arrayContains<T>(array: $ReadOnlyArray<T>, value: T): boolean {\n  return array.indexOf(value) !== -1;\n}\n\nfunction updateErrorWithErrorData(\n  errorData: {message: string, ...},\n  error: ExtendedError,\n): ExtendedError {\n  return Object.assign(error, errorData || {});\n}\n\nlet NativeModules: {[moduleName: string]: $FlowFixMe, ...} = {};\nif (global.nativeModuleProxy) {\n  NativeModules = global.nativeModuleProxy;\n} else if (!global.nativeExtensions) {\n  const bridgeConfig = global.__fbBatchedBridgeConfig;\n  invariant(\n    bridgeConfig,\n    '__fbBatchedBridgeConfig is not set, cannot invoke native modules',\n  );\n\n  const defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\n  (bridgeConfig.remoteModuleConfig || []).forEach(\n    (config: ModuleConfig, moduleID: number) => {\n      // Initially this config will only contain the module name when running in JSC. The actual\n      // configuration of the module will be lazily loaded.\n      const info = genModule(config, moduleID);\n      if (!info) {\n        return;\n      }\n\n      if (info.module) {\n        NativeModules[info.name] = info.module;\n      }\n      // If there's no module config, define a lazy getter\n      else {\n        defineLazyObjectProperty(NativeModules, info.name, {\n          get: () => loadModule(info.name, moduleID),\n        });\n      }\n    },\n  );\n}\n\nmodule.exports = NativeModules;\n"]},"metadata":{},"sourceType":"script"}