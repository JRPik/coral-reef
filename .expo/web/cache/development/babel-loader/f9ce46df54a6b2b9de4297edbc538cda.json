{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Camera } from 'expo-camera';\nimport { StatusBar } from \"expo-status-bar\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport AppLoading from \"expo-app-loading\";\nimport { useFonts, RobotoCondensed_300Light, RobotoCondensed_300Light_Italic, RobotoCondensed_400Regular, RobotoCondensed_400Regular_Italic, RobotoCondensed_700Bold, RobotoCondensed_700Bold_Italic } from \"@expo-google-fonts/dev\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function app() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return _jsx(View, {});\n  }\n\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No access to camera\"\n    });\n  }\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Camera, {\n      style: styles.camera,\n      type: type,\n      children: _jsx(View, {\n        style: styles.buttonContainer,\n        children: _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n          },\n          children: _jsx(Text, {\n            style: styles.text,\n            children: \" Flip Camera \"\n          })\n        })\n      })\n    })\n  });\n}\n\nvar backToNewEntry = function backToNewEntry() {\n  navigation.navigate(\"NewEntry\");\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: 'black'\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    backgroundColor: \"white\",\n    height: 40,\n    width: \"75%\",\n    margin: 10,\n    top: 0,\n    borderRadius: 5,\n    shadowColor: \"black\",\n    shadowOpacity: 0.3,\n    shadowOffset: {\n      height: 1,\n      width: 0.3\n    }\n  },\n  button: {},\n  text: {\n    fontSize: 15,\n    textAlign: \"center\",\n    fontFamily: \"RobotoCondensed_400Regular\"\n  }\n});","map":{"version":3,"sources":["D:/Senior Design/coral-reef/screens/picture.js"],"names":["React","useState","useEffect","Camera","StatusBar","SafeAreaView","AppLoading","useFonts","RobotoCondensed_300Light","RobotoCondensed_300Light_Italic","RobotoCondensed_400Regular","RobotoCondensed_400Regular_Italic","RobotoCondensed_700Bold","RobotoCondensed_700Bold_Italic","app","hasPermission","setHasPermission","Constants","Type","back","type","setType","requestCameraPermissionsAsync","status","styles","container","camera","buttonContainer","button","front","text","backToNewEntry","navigation","navigate","StyleSheet","create","flex","flexDirection","backgroundColor","height","width","margin","top","borderRadius","shadowColor","shadowOpacity","shadowOffset","fontSize","textAlign","fontFamily"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\r\nimport { Camera } from 'expo-camera';\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport {Platform, TextInput, Image, ScrollView, KeyboardAvoidingView,\r\n} from \"react-native\";\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport AppLoading from \"expo-app-loading\";\r\nimport {\r\n  useFonts,\r\n  RobotoCondensed_300Light,\r\n  RobotoCondensed_300Light_Italic,\r\n  RobotoCondensed_400Regular,\r\n  RobotoCondensed_400Regular_Italic,\r\n  RobotoCondensed_700Bold,\r\n  RobotoCondensed_700Bold_Italic,\r\n} from \"@expo-google-fonts/dev\";\r\n\r\n\r\nexport default function app() {\r\n    const [hasPermission, setHasPermission] = useState(null);\r\n    const [type, setType] = useState(Camera.Constants.Type.back);\r\n  \r\n    useEffect(() => {\r\n      (async () => {\r\n        const { status } = await Camera.requestCameraPermissionsAsync();\r\n        setHasPermission(status === 'granted');\r\n      })();\r\n    }, []);\r\n  \r\n    if (hasPermission === null) {\r\n      return <View />;\r\n    }\r\n    if (hasPermission === false) {\r\n      return <Text>No access to camera</Text>;\r\n    }\r\n    return (\r\n      <View style={styles.container}>\r\n        <Camera style={styles.camera} type={type}>\r\n          <View style={styles.buttonContainer}>\r\n            <TouchableOpacity\r\n              style={styles.button}\r\n              onPress={() => {\r\n                setType(\r\n                  type === Camera.Constants.Type.back\r\n                    ? Camera.Constants.Type.front\r\n                    : Camera.Constants.Type.back\r\n                );\r\n              }}>\r\n              <Text style={styles.text}> Flip Camera </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </Camera>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  \r\n  const backToNewEntry = () => {\r\n    navigation.navigate(\"NewEntry\");\r\n  };\r\n\r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      flexDirection: 'column',\r\n      backgroundColor: 'black',\r\n\r\n    },\r\n    camera: {\r\n      flex: 1,\r\n\r\n    },\r\n    buttonContainer: {\r\n      backgroundColor: \"white\",\r\n      height: 40,\r\n      width: \"75%\",\r\n      margin: 10,\r\n      top: 0,\r\n      borderRadius: 5,\r\n      shadowColor: \"black\",\r\n      shadowOpacity: 0.3,\r\n      //fontFamily: \"RobotoCondensed_400Regular\",\r\n      shadowOffset: { height: 1, width: 0.3 },\r\n\r\n    },\r\n    button: {\r\n      \r\n    },\r\n    text:{\r\n      fontSize: 15,\r\n      textAlign: \"center\",\r\n      fontFamily: \"RobotoCondensed_400Regular\",\r\n    },\r\n\r\n  })"]},"metadata":{},"sourceType":"module"}