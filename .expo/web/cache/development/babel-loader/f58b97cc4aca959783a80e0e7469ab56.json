{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from \"expo-status-bar\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useState } from \"react\";\nimport AppLoading from \"expo-app-loading\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { useFonts, Roboto_400Regular } from \"@expo-google-fonts/dev\";\nimport colors from \"../config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function NewEntry(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(\"date\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      show = _useState6[0],\n      setShow = _useState6[1];\n\n  var _useState7 = useState(\"Empty\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dateText = _useState8[0],\n      setDateText = _useState8[1];\n\n  var _useState9 = useState(\"Empty\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      timeText = _useState10[0],\n      setTimeText = _useState10[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(Platform.OS === \"ios\");\n    setDate(currentDate);\n    var tempDate = new Date(currentDate);\n    var amPM = \"a.m\";\n    var properHour = tempDate.getHours();\n\n    if (properHour > 12) {\n      properHour = tempDate.getHours() - 12;\n      amPM = \"p.m.\";\n    } else {\n      amPM = \"a.m.\";\n    }\n\n    if (properHour < 10) {\n      properHour = \"0\" + properHour;\n    }\n\n    var properMinutes = tempDate.getMinutes();\n\n    if (properMinutes < 10) {\n      properMinutes = \"0\" + tempDate.getMinutes();\n    }\n\n    var properSecs = tempDate.getSeconds();\n\n    if (properSecs < 10) {\n      properSecs = \"0\" + tempDate.getSeconds();\n    }\n\n    var fDate = tempDate.getMonth() + 1 + \"/\" + tempDate.getDate() + \"/\" + tempDate.getFullYear();\n    var fTime = properHour + \":\" + properMinutes + \":\" + properSecs + \" \" + amPM;\n    setDateText(fDate);\n    setTimeText(fTime);\n  };\n\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  var pressedHandler = function pressedHandler() {\n    navigation.navigate(\"Logon\");\n  };\n\n  var _useFonts = useFonts({\n    Roboto_400Regular: Roboto_400Regular\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  } else {\n    return _jsxs(SafeAreaView, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          justifyContent: \"space-between\"\n        },\n        children: [_jsx(Text, {\n          style: styles.text,\n          children: dateText\n        }), _jsx(TouchableOpacity, {\n          style: styles.buttonContainer,\n          onPress: function onPress() {\n            return showMode(\"date\");\n          },\n          children: _jsx(Text, {\n            style: {\n              textAlign: \"center\",\n              color: \"white\",\n              fontFamily: \"Roboto_400Regular\"\n            },\n            children: \"Select Date\"\n          })\n        })]\n      }), _jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          justifyContent: \"space-between\"\n        },\n        children: [_jsx(Text, {\n          style: styles.text,\n          children: timeText\n        }), _jsx(TouchableOpacity, {\n          style: styles.buttonContainer,\n          onPress: function onPress() {\n            return showMode(\"time\");\n          },\n          children: _jsx(Text, {\n            style: {\n              textAlign: \"center\",\n              color: \"white\",\n              fontFamily: \"Roboto_400Regular\"\n            },\n            children: \"Select Time\"\n          })\n        })]\n      }), show && _jsx(DateTimePicker, {\n        testID: \"dateTimePicker\",\n        value: date,\n        mode: mode,\n        is24Hour: false,\n        display: \"default\",\n        onChange: onChange\n      }), _jsx(StatusBar, {\n        style: \"auto\"\n      })]\n    });\n  }\n}\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    marginTop: 10,\n    backgroundColor: colors.primary,\n    width: \"25%\",\n    alignSelf: \"flex-end\",\n    borderRadius: 20,\n    padding: 10\n  },\n  container: {\n    flex: 1,\n    backgroundColor: colors.backGroundOne,\n    alignContent: \"center\"\n  },\n  image: {\n    width: 250,\n    height: 250,\n    resizeMode: \"contain\"\n  },\n  imageContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: colors.backGroundOne,\n    margin: 16,\n    borderRadius: 8,\n    shadowColor: colors.shadowTwo,\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    shadowOffset: {\n      height: 1,\n      width: 0.3\n    }\n  },\n  text: {\n    padding: 10,\n    fontSize: 18,\n    fontFamily: \"Roboto_400Regular\"\n  },\n  text2: {\n    marginBottom: 15,\n    marginTop: 15,\n    fontSize: 15,\n    textAlign: \"center\"\n  },\n  textbox: {\n    backgroundColor: colors.backGroundOne,\n    height: 40,\n    width: \"75%\",\n    margin: 10,\n    borderRadius: 5,\n    shadowColor: colors.shadowOne,\n    shadowOpacity: 0.3,\n    shadowOffset: {\n      height: 1,\n      width: 0.3\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/ajrow/OneDrive/react-app/coral-reef/app/screens/newEntry.js"],"names":["StatusBar","React","useState","AppLoading","SafeAreaView","DateTimePicker","useFonts","Roboto_400Regular","colors","NewEntry","navigation","Date","date","setDate","mode","setMode","show","setShow","dateText","setDateText","timeText","setTimeText","onChange","event","selectedDate","currentDate","Platform","OS","tempDate","amPM","properHour","getHours","properMinutes","getMinutes","properSecs","getSeconds","fDate","getMonth","getDate","getFullYear","fTime","showMode","currentMode","pressedHandler","navigate","fontsLoaded","styles","container","flexDirection","justifyContent","text","buttonContainer","textAlign","color","fontFamily","StyleSheet","create","marginTop","backgroundColor","primary","width","alignSelf","borderRadius","padding","flex","backGroundOne","alignContent","image","height","resizeMode","imageContainer","alignItems","margin","shadowColor","shadowTwo","shadowOpacity","shadowRadius","shadowOffset","fontSize","text2","marginBottom","textbox","shadowOne"],"mappings":"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","sourcesContent":["//IMPORTS FROM OUR THIRD-PARTIES\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport {\r\n  Platform,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport AppLoading from \"expo-app-loading\";\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\r\nimport { useFonts, Roboto_400Regular } from \"@expo-google-fonts/dev\";\r\n\r\n//IMPORT FROM OUR CODE\r\nimport colors from \"../config/colors\";\r\n//import AppText from \"../components/AppText\";\r\n//import MyHeading from \"../components/MyHeading\";\r\n\r\nexport default function NewEntry({ navigation }) {\r\n  //States used to set date and time\r\n  const [date, setDate] = useState(new Date());\r\n  const [mode, setMode] = useState(\"date\");\r\n  const [show, setShow] = useState(false);\r\n  const [dateText, setDateText] = useState(\"Empty\");\r\n  const [timeText, setTimeText] = useState(\"Empty\");\r\n\r\n  //When changed show it\r\n  const onChange = (event, selectedDate) => {\r\n    const currentDate = selectedDate || date;\r\n    setShow(Platform.OS === \"ios\");\r\n    setDate(currentDate);\r\n\r\n    let tempDate = new Date(currentDate);\r\n\r\n    let amPM = \"a.m\";\r\n\r\n    let properHour = tempDate.getHours();\r\n    if (properHour > 12) {\r\n      properHour = tempDate.getHours() - 12;\r\n      amPM = \"p.m.\";\r\n    } else {\r\n      amPM = \"a.m.\";\r\n    }\r\n\r\n    if (properHour < 10) {\r\n      properHour = \"0\" + properHour;\r\n    }\r\n\r\n    let properMinutes = tempDate.getMinutes();\r\n    if (properMinutes < 10) {\r\n      properMinutes = \"0\" + tempDate.getMinutes();\r\n    }\r\n\r\n    let properSecs = tempDate.getSeconds();\r\n    if (properSecs < 10) {\r\n      properSecs = \"0\" + tempDate.getSeconds();\r\n    }\r\n\r\n    //The format that the date is displayed\r\n    let fDate =\r\n      tempDate.getMonth() +\r\n      1 +\r\n      \"/\" +\r\n      tempDate.getDate() +\r\n      \"/\" +\r\n      tempDate.getFullYear();\r\n    //Format at which the time is displayed\r\n    let fTime =\r\n      properHour + \":\" + properMinutes + \":\" + properSecs + \" \" + amPM;\r\n\r\n    setDateText(fDate);\r\n    setTimeText(fTime);\r\n  };\r\n\r\n  const showMode = (currentMode) => {\r\n    setShow(true);\r\n    setMode(currentMode);\r\n  };\r\n\r\n  const pressedHandler = () => {\r\n    navigation.navigate(\"Logon\");\r\n  };\r\n\r\n  let [fontsLoaded] = useFonts({\r\n    Roboto_400Regular,\r\n  });\r\n\r\n  if (!fontsLoaded) {\r\n    return <AppLoading />;\r\n  } else {\r\n    return (\r\n      <SafeAreaView style={styles.container}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <Text style={styles.text}>{dateText}</Text>\r\n          <TouchableOpacity\r\n            style={styles.buttonContainer}\r\n            onPress={() => showMode(\"date\")}\r\n          >\r\n            <Text\r\n              style={{\r\n                textAlign: \"center\",\r\n                color: \"white\",\r\n                fontFamily: \"Roboto_400Regular\",\r\n              }}\r\n            >\r\n              Select Date\r\n            </Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n        <View style={{ flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n          <Text style={styles.text}>{timeText}</Text>\r\n          <TouchableOpacity\r\n            style={styles.buttonContainer}\r\n            onPress={() => showMode(\"time\")}\r\n          >\r\n            <Text\r\n              style={{\r\n                textAlign: \"center\",\r\n                color: \"white\",\r\n                fontFamily: \"Roboto_400Regular\",\r\n              }}\r\n            >\r\n              Select Time\r\n            </Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n\r\n        {show && (\r\n          <DateTimePicker\r\n            testID=\"dateTimePicker\"\r\n            value={date}\r\n            mode={mode}\r\n            is24Hour={false}\r\n            display=\"default\"\r\n            onChange={onChange}\r\n          />\r\n        )}\r\n\r\n        <StatusBar style=\"auto\" />\r\n      </SafeAreaView>\r\n    );\r\n  }\r\n}\r\nconst styles = StyleSheet.create({\r\n  buttonContainer: {\r\n    marginTop: 10,\r\n    backgroundColor: colors.primary,\r\n    width: \"25%\",\r\n    alignSelf: \"flex-end\",\r\n    borderRadius: 20,\r\n    padding: 10,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: colors.backGroundOne,\r\n    alignContent: \"center\",\r\n  },\r\n  image: {\r\n    width: 250,\r\n    height: 250,\r\n    resizeMode: \"contain\",\r\n  },\r\n  imageContainer: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: colors.backGroundOne,\r\n    margin: 16,\r\n    borderRadius: 8,\r\n    shadowColor: colors.shadowTwo,\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 8,\r\n    shadowOffset: { height: 1, width: 0.3 },\r\n  },\r\n  text: {\r\n    padding: 10,\r\n    fontSize: 18,\r\n    fontFamily: \"Roboto_400Regular\",\r\n  },\r\n  text2: {\r\n    marginBottom: 15,\r\n    marginTop: 15,\r\n    fontSize: 15,\r\n    textAlign: \"center\",\r\n  },\r\n  textbox: {\r\n    backgroundColor: colors.backGroundOne,\r\n    height: 40,\r\n    width: \"75%\",\r\n    margin: 10,\r\n    borderRadius: 5,\r\n    shadowColor: colors.shadowOne,\r\n    shadowOpacity: 0.3,\r\n    shadowOffset: { height: 1, width: 0.3 },\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}