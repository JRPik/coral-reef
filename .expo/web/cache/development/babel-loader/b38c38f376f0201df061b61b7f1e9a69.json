{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"size\", \"color\", \"style\", \"animating\", \"hidesWhenStopped\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { defaultProps } from \"./SpinnerProps\";\nimport AnimationContainer from \"./AnimationContainer\";\nimport { stagger } from \"./utils\";\n\nvar Flow = function (_React$Component) {\n  _inherits(Flow, _React$Component);\n\n  var _super = _createSuper(Flow);\n\n  function Flow() {\n    _classCallCheck(this, Flow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Flow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          size = _this$props.size,\n          color = _this$props.color,\n          style = _this$props.style,\n          animating = _this$props.animating,\n          hidesWhenStopped = _this$props.hidesWhenStopped,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(AnimationContainer, {\n        initAnimation: function initAnimation() {\n          return {\n            flow: function flow(value) {\n              return stagger(150, 3, {\n                duration: 1400,\n                value: value,\n                easing: Easing.bezier(0.455, 0.03, 0.515, 0.955),\n                keyframes: [0, 40, 80, 100]\n              });\n            }\n          };\n        },\n        animating: animating\n      }, function (values) {\n        return React.createElement(View, _extends({\n          style: [{\n            width: size,\n            height: size * 0.25,\n            justifyContent: 'space-between',\n            flexDirection: 'row',\n            opacity: !animating && hidesWhenStopped ? 0 : 1\n          }, style]\n        }, rest), values.flow.map(function (value, index) {\n          return React.createElement(Animated.View, {\n            key: index,\n            style: {\n              width: size * 0.25,\n              height: size * 0.25,\n              borderRadius: size * 0.25 / 2,\n              backgroundColor: color,\n              transform: [{\n                scale: value.interpolate({\n                  inputRange: [0, 40, 80, 100],\n                  outputRange: [0.3, 1, 0.3, 0.3]\n                })\n              }]\n            }\n          });\n        }));\n      });\n    }\n  }]);\n\n  return Flow;\n}(React.Component);\n\nexport { Flow as default };\n\n_defineProperty(Flow, \"defaultProps\", defaultProps);","map":{"version":3,"sources":["Flow.tsx"],"names":["Flow","React","defaultProps","render","rest","flow","value","stagger","duration","easing","Easing","keyframes","animating","values","width","height","size","justifyContent","flexDirection","opacity","borderRadius","backgroundColor","transform","scale","inputRange","outputRange"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,SAAA,YAAA;AACA,OAAA,kBAAA;AACA,SAAA,OAAA;;IAEe,I;;;;;;;;;;;;;WAGbG,kBAAS;AACP,wBAOI,KAPJ,KAAA;AAAA,UAAM,IAAN,eAAM,IAAN;AAAA,UAAM,KAAN,eAAM,KAAN;AAAA,UAAM,KAAN,eAAM,KAAN;AAAA,UAAM,SAAN,eAAM,SAAN;AAAA,UAAM,gBAAN,eAAM,gBAAN;AAAA,UAMKC,IANL;;AASA,aACE,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA;AACE,QAAA,aAAa,EAAE;AAAA,iBAAO;AACpBC,YAAAA,IAAI,EAAGC,cAAAA,KAAD;AAAA,qBACJC,OAAO,CAAA,GAAA,EAAA,CAAA,EAAS;AACdC,gBAAAA,QAAQ,EADM,IAAA;AAEdF,gBAAAA,KAAK,EAFS,KAAA;AAGdG,gBAAAA,MAAM,EAAEC,MAAM,CAANA,MAAAA,CAAAA,KAAAA,EAAAA,IAAAA,EAAAA,KAAAA,EAHM,KAGNA,CAHM;AAIdC,gBAAAA,SAAS,EAAE,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA;AAJG,eAAT,CADH;AAAA;AADc,WAAP;AAAA,SADjB;AAUE,QAAA,SAAS,EAAEC;AAVb,OAAA,EAYIC,UAAAA,MAAD;AAAA,eACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,UAAA,KAAK,EAAE,CACL;AACEC,YAAAA,KAAK,EADP,IAAA;AAEEC,YAAAA,MAAM,EAAEC,IAAI,GAFd,IAAA;AAGEC,YAAAA,cAAc,EAHhB,eAAA;AAIEC,YAAAA,aAAa,EAJf,KAAA;AAKEC,YAAAA,OAAO,EAAE,CAAA,SAAA,IAAA,gBAAA,GAAA,CAAA,GAAqC;AALhD,WADK,EAAA,KAAA;AADT,SAAA,EAAA,IAAA,CAAA,EAaG,MAAM,CAAN,IAAA,CAAA,GAAA,CAAgB,UAAA,KAAA,EAAA,KAAA;AAAA,iBACf,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,YAAA,GAAG,EADL,KAAA;AAEE,YAAA,KAAK,EAAE;AACLL,cAAAA,KAAK,EAAEE,IAAI,GADN,IAAA;AAELD,cAAAA,MAAM,EAAEC,IAAI,GAFP,IAAA;AAGLI,cAAAA,YAAY,EAAGJ,IAAI,GAAL,IAACA,GAHV,CAAA;AAILK,cAAAA,eAAe,EAJV,KAAA;AAKLC,cAAAA,SAAS,EAAE,CACT;AACEC,gBAAAA,KAAK,EAAE,KAAK,CAAL,WAAA,CAAkB;AACvBC,kBAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EADW,GACX,CADW;AAEvBC,kBAAAA,WAAW,EAAE,CAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA;AAFU,iBAAlB;AADT,eADS;AALN;AAFT,WAAA,CADe;AAAA,SAAhB,CAbH,CADD;AAAA,OAZH,CADF;AAkDD;;;;EA/D+BxB,KAAK,CAAxB,S;;SAAA,I;;gBAAMD,I,kBACGE,Y","sourcesContent":["import * as React from 'react'\nimport { Animated, Easing, View } from 'react-native'\nimport { SpinnerProps, defaultProps } from './SpinnerProps'\nimport AnimationContainer from './AnimationContainer'\nimport { stagger } from './utils'\n\nexport default class Flow extends React.Component<SpinnerProps> {\n  static defaultProps = defaultProps\n\n  render() {\n    const {\n      size,\n      color,\n      style,\n      animating,\n      hidesWhenStopped,\n      ...rest\n    } = this.props\n\n    return (\n      <AnimationContainer\n        initAnimation={() => ({\n          flow: (value) =>\n            stagger(150, 3, {\n              duration: 1400,\n              value: value,\n              easing: Easing.bezier(0.455, 0.03, 0.515, 0.955),\n              keyframes: [0, 40, 80, 100],\n            }),\n        })}\n        animating={animating}\n      >\n        {(values) => (\n          <View\n            style={[\n              {\n                width: size,\n                height: size * 0.25,\n                justifyContent: 'space-between',\n                flexDirection: 'row',\n                opacity: !animating && hidesWhenStopped ? 0 : 1,\n              },\n              style,\n            ]}\n            {...rest}\n          >\n            {values.flow.map((value, index) => (\n              <Animated.View\n                key={index}\n                style={{\n                  width: size * 0.25,\n                  height: size * 0.25,\n                  borderRadius: (size * 0.25) / 2,\n                  backgroundColor: color,\n                  transform: [\n                    {\n                      scale: value.interpolate({\n                        inputRange: [0, 40, 80, 100],\n                        outputRange: [0.3, 1, 0.3, 0.3],\n                      }),\n                    },\n                  ],\n                }}\n              />\n            ))}\n          </View>\n        )}\n      </AnimationContainer>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}