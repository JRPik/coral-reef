{"ast":null,"code":"'use strict';\n\nvar MatrixMath = require(\"../Utilities/MatrixMath\");\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar invariant = require('invariant');\n\nvar stringifySafe = require(\"../Utilities/stringifySafe\").default;\n\nfunction processTransform(transform) {\n  if (__DEV__) {\n    _validateTransforms(transform);\n  }\n\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return transform;\n  }\n\n  var result = MatrixMath.createIdentityMatrix();\n  transform.forEach(function (transformation) {\n    var key = Object.keys(transformation)[0];\n    var value = transformation[key];\n\n    switch (key) {\n      case 'matrix':\n        MatrixMath.multiplyInto(result, result, value);\n        break;\n\n      case 'perspective':\n        _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);\n\n        break;\n\n      case 'rotateX':\n        _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);\n\n        break;\n\n      case 'rotateY':\n        _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);\n\n        break;\n\n      case 'rotate':\n      case 'rotateZ':\n        _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);\n\n        break;\n\n      case 'scale':\n        _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);\n\n        break;\n\n      case 'scaleX':\n        _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);\n\n        break;\n\n      case 'scaleY':\n        _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);\n\n        break;\n\n      case 'translate':\n        _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);\n\n        break;\n\n      case 'translateX':\n        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);\n\n        break;\n\n      case 'translateY':\n        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);\n\n        break;\n\n      case 'skewX':\n        _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);\n\n        break;\n\n      case 'skewY':\n        _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);\n\n        break;\n\n      default:\n        throw new Error('Invalid transform name: ' + key);\n    }\n  });\n  return result;\n}\n\nfunction _multiplyTransform(result, matrixMathFunction, args) {\n  var matrixToApply = MatrixMath.createIdentityMatrix();\n  var argsWithIdentity = [matrixToApply].concat(args);\n  matrixMathFunction.apply(this, argsWithIdentity);\n  MatrixMath.multiplyInto(result, result, matrixToApply);\n}\n\nfunction _convertToRadians(value) {\n  var floatValue = parseFloat(value);\n  return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;\n}\n\nfunction _validateTransforms(transform) {\n  transform.forEach(function (transformation) {\n    var keys = Object.keys(transformation);\n    invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));\n    var key = keys[0];\n    var value = transformation[key];\n\n    _validateTransform(key, value, transformation);\n  });\n}\n\nfunction _validateTransform(key, value, transformation) {\n  invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');\n  var multivalueTransforms = ['matrix', 'translate'];\n\n  if (multivalueTransforms.indexOf(key) !== -1) {\n    invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));\n  }\n\n  switch (key) {\n    case 'matrix':\n      invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));\n      break;\n\n    case 'translate':\n      invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));\n      break;\n\n    case 'rotateX':\n    case 'rotateY':\n    case 'rotateZ':\n    case 'rotate':\n    case 'skewX':\n    case 'skewY':\n      invariant(typeof value === 'string', 'Transform with key of \"%s\" must be a string: %s', key, stringifySafe(transformation));\n      invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));\n      break;\n\n    case 'perspective':\n      invariant(typeof value === 'number', 'Transform with key of \"%s\" must be a number: %s', key, stringifySafe(transformation));\n      invariant(value !== 0, 'Transform with key of \"%s\" cannot be zero: %s', key, stringifySafe(transformation));\n      break;\n\n    case 'translateX':\n    case 'translateY':\n    case 'scale':\n    case 'scaleX':\n    case 'scaleY':\n      invariant(typeof value === 'number', 'Transform with key of \"%s\" must be a number: %s', key, stringifySafe(transformation));\n      break;\n\n    default:\n      invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));\n  }\n}\n\nmodule.exports = processTransform;","map":{"version":3,"sources":["D:/Senior Design/coral-reef/node_modules/react-native/Libraries/StyleSheet/processTransform.js"],"names":["MatrixMath","require","Platform","invariant","stringifySafe","default","processTransform","transform","__DEV__","_validateTransforms","OS","result","createIdentityMatrix","forEach","transformation","key","Object","keys","value","multiplyInto","_multiplyTransform","reusePerspectiveCommand","reuseRotateXCommand","_convertToRadians","reuseRotateYCommand","reuseRotateZCommand","reuseScaleCommand","reuseScaleXCommand","reuseScaleYCommand","reuseTranslate3dCommand","reuseTranslate2dCommand","reuseSkewXCommand","reuseSkewYCommand","Error","matrixMathFunction","args","matrixToApply","argsWithIdentity","concat","apply","floatValue","parseFloat","indexOf","Math","PI","length","_validateTransform","getValue","multivalueTransforms","Array","isArray","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst MatrixMath = require('../Utilities/MatrixMath');\nconst Platform = require('../Utilities/Platform');\n\nconst invariant = require('invariant');\nconst stringifySafe = require('../Utilities/stringifySafe').default;\n\n/**\n * Generate a transform matrix based on the provided transforms, and use that\n * within the style object instead.\n *\n * This allows us to provide an API that is similar to CSS, where transforms may\n * be applied in an arbitrary order, and yet have a universal, singular\n * interface to native code.\n */\nfunction processTransform(\n  transform: Array<Object>,\n): Array<Object> | Array<number> {\n  if (__DEV__) {\n    _validateTransforms(transform);\n  }\n\n  // Android & iOS implementations of transform property accept the list of\n  // transform properties as opposed to a transform Matrix. This is necessary\n  // to control transform property updates completely on the native thread.\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return transform;\n  }\n\n  const result = MatrixMath.createIdentityMatrix();\n\n  transform.forEach(transformation => {\n    const key = Object.keys(transformation)[0];\n    const value = transformation[key];\n\n    switch (key) {\n      case 'matrix':\n        MatrixMath.multiplyInto(result, result, value);\n        break;\n      case 'perspective':\n        _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);\n        break;\n      case 'rotateX':\n        _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [\n          _convertToRadians(value),\n        ]);\n        break;\n      case 'rotateY':\n        _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [\n          _convertToRadians(value),\n        ]);\n        break;\n      case 'rotate':\n      case 'rotateZ':\n        _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [\n          _convertToRadians(value),\n        ]);\n        break;\n      case 'scale':\n        _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);\n        break;\n      case 'scaleX':\n        _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);\n        break;\n      case 'scaleY':\n        _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);\n        break;\n      case 'translate':\n        _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [\n          value[0],\n          value[1],\n          value[2] || 0,\n        ]);\n        break;\n      case 'translateX':\n        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [\n          value,\n          0,\n        ]);\n        break;\n      case 'translateY':\n        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [\n          0,\n          value,\n        ]);\n        break;\n      case 'skewX':\n        _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [\n          _convertToRadians(value),\n        ]);\n        break;\n      case 'skewY':\n        _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [\n          _convertToRadians(value),\n        ]);\n        break;\n      default:\n        throw new Error('Invalid transform name: ' + key);\n    }\n  });\n\n  return result;\n}\n\n/**\n * Performs a destructive operation on a transform matrix.\n */\nfunction _multiplyTransform(\n  result: Array<number>,\n  matrixMathFunction: Function,\n  args: Array<number>,\n): void {\n  const matrixToApply = MatrixMath.createIdentityMatrix();\n  const argsWithIdentity = [matrixToApply].concat(args);\n  matrixMathFunction.apply(this, argsWithIdentity);\n  MatrixMath.multiplyInto(result, result, matrixToApply);\n}\n\n/**\n * Parses a string like '0.5rad' or '60deg' into radians expressed in a float.\n * Note that validation on the string is done in `_validateTransform()`.\n */\nfunction _convertToRadians(value: string): number {\n  const floatValue = parseFloat(value);\n  return value.indexOf('rad') > -1 ? floatValue : (floatValue * Math.PI) / 180;\n}\n\nfunction _validateTransforms(transform: Array<Object>): void {\n  transform.forEach(transformation => {\n    const keys = Object.keys(transformation);\n    invariant(\n      keys.length === 1,\n      'You must specify exactly one property per transform object. Passed properties: %s',\n      stringifySafe(transformation),\n    );\n    const key = keys[0];\n    const value = transformation[key];\n    _validateTransform(key, value, transformation);\n  });\n}\n\nfunction _validateTransform(key, value, transformation) {\n  invariant(\n    !value.getValue,\n    'You passed an Animated.Value to a normal component. ' +\n      'You need to wrap that component in an Animated. For example, ' +\n      'replace <View /> by <Animated.View />.',\n  );\n\n  const multivalueTransforms = ['matrix', 'translate'];\n  if (multivalueTransforms.indexOf(key) !== -1) {\n    invariant(\n      Array.isArray(value),\n      'Transform with key of %s must have an array as the value: %s',\n      key,\n      stringifySafe(transformation),\n    );\n  }\n  switch (key) {\n    case 'matrix':\n      invariant(\n        value.length === 9 || value.length === 16,\n        'Matrix transform must have a length of 9 (2d) or 16 (3d). ' +\n          'Provided matrix has a length of %s: %s',\n        /* $FlowFixMe(>=0.84.0 site=react_native_fb) This comment suppresses an\n         * error found when Flow v0.84 was deployed. To see the error, delete\n         * this comment and run Flow. */\n        value.length,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'translate':\n      invariant(\n        value.length === 2 || value.length === 3,\n        'Transform with key translate must be an array of length 2 or 3, found %s: %s',\n        /* $FlowFixMe(>=0.84.0 site=react_native_fb) This comment suppresses an\n         * error found when Flow v0.84 was deployed. To see the error, delete\n         * this comment and run Flow. */\n        value.length,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'rotateX':\n    case 'rotateY':\n    case 'rotateZ':\n    case 'rotate':\n    case 'skewX':\n    case 'skewY':\n      invariant(\n        typeof value === 'string',\n        'Transform with key of \"%s\" must be a string: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      invariant(\n        value.indexOf('deg') > -1 || value.indexOf('rad') > -1,\n        'Rotate transform must be expressed in degrees (deg) or radians ' +\n          '(rad): %s',\n        stringifySafe(transformation),\n      );\n      break;\n    case 'perspective':\n      invariant(\n        typeof value === 'number',\n        'Transform with key of \"%s\" must be a number: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      invariant(\n        value !== 0,\n        'Transform with key of \"%s\" cannot be zero: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'translateX':\n    case 'translateY':\n    case 'scale':\n    case 'scaleX':\n    case 'scaleY':\n      invariant(\n        typeof value === 'number',\n        'Transform with key of \"%s\" must be a number: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      break;\n    default:\n      invariant(\n        false,\n        'Invalid transform %s: %s',\n        key,\n        stringifySafe(transformation),\n      );\n  }\n}\n\nmodule.exports = processTransform;\n"]},"metadata":{},"sourceType":"script"}