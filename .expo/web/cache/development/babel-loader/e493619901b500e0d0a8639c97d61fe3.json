{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar UIManagerProperties = require(\"./UIManagerProperties\");\n\nvar defineLazyObjectProperty = require(\"../Utilities/defineLazyObjectProperty\");\n\nimport NativeUIManager from \"./NativeUIManager\";\nvar viewManagerConfigs = {};\nvar triedLoadingConfig = new Set();\nvar NativeUIManagerConstants = {};\nvar isNativeUIManagerConstantsSet = false;\n\nfunction _getConstants() {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n\n  return NativeUIManagerConstants;\n}\n\nvar UIManagerJS = _objectSpread(_objectSpread({}, NativeUIManager), {}, {\n  getConstants: function getConstants() {\n    return _getConstants();\n  },\n  getViewManagerConfig: function getViewManagerConfig(viewManagerName) {\n    if (viewManagerConfigs[viewManagerName] === undefined && NativeUIManager.getConstantsForViewManager) {\n      try {\n        viewManagerConfigs[viewManagerName] = NativeUIManager.getConstantsForViewManager(viewManagerName);\n      } catch (e) {\n        viewManagerConfigs[viewManagerName] = null;\n      }\n    }\n\n    var config = viewManagerConfigs[viewManagerName];\n\n    if (config) {\n      return config;\n    }\n\n    if (!global.nativeCallSyncHook) {\n      return config;\n    }\n\n    if (NativeUIManager.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {\n      var result = NativeUIManager.lazilyLoadView(viewManagerName);\n      triedLoadingConfig.add(viewManagerName);\n\n      if (result.viewConfig) {\n        _getConstants()[viewManagerName] = result.viewConfig;\n        lazifyViewManagerConfig(viewManagerName);\n      }\n    }\n\n    return viewManagerConfigs[viewManagerName];\n  }\n});\n\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName) {\n  var viewConfig = _getConstants()[viewName];\n\n  viewManagerConfigs[viewName] = viewConfig;\n\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var constants = {};\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n\n          if (typeof value !== 'function') {\n            constants[key] = value;\n          }\n        });\n        return constants;\n      }\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var commands = {};\n        var index = 0;\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n\n          if (typeof value === 'function') {\n            commands[key] = index++;\n          }\n        });\n        return commands;\n      }\n    });\n  }\n}\n\nif (Platform.OS === 'ios') {\n  Object.keys(_getConstants()).forEach(function (viewName) {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (_getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(function (viewManagerName) {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: function get() {\n        return NativeUIManager.getConstantsForViewManager(viewManagerName);\n      }\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(_getConstants()).forEach(function (viewManagerName) {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];\n      }\n\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: function get() {\n          console.warn(\"Accessing view manager configs directly off UIManager via UIManager['\" + viewManagerName + \"'] \" + (\"is no longer supported. Use UIManager.getViewManagerConfig('\" + viewManagerName + \"') instead.\"));\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        }\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;","map":{"version":3,"sources":["D:/Senior Design/coral-reef/node_modules/react-native/Libraries/ReactNative/PaperUIManager.js"],"names":["NativeModules","require","Platform","UIManagerProperties","defineLazyObjectProperty","NativeUIManager","viewManagerConfigs","triedLoadingConfig","Set","NativeUIManagerConstants","isNativeUIManagerConstantsSet","getConstants","UIManagerJS","getViewManagerConfig","viewManagerName","undefined","getConstantsForViewManager","e","config","global","nativeCallSyncHook","lazilyLoadView","has","result","add","viewConfig","lazifyViewManagerConfig","viewName","Manager","get","viewManager","constants","Object","keys","forEach","key","value","commands","index","OS","ViewManagerNames","includes","console","warn","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst Platform = require('../Utilities/Platform');\nconst UIManagerProperties = require('./UIManagerProperties');\n\nconst defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\n\nimport NativeUIManager from './NativeUIManager';\n\nconst viewManagerConfigs = {};\n\nconst triedLoadingConfig = new Set();\n\nlet NativeUIManagerConstants = {};\nlet isNativeUIManagerConstantsSet = false;\nfunction getConstants(): Object {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\n\n/* $FlowFixMe(>=0.123.0 site=react_native_fb) This comment suppresses an error\n * found when Flow v0.123.0 was deployed. To see the error, delete this comment\n * and run Flow. */\nconst UIManagerJS = {\n  ...NativeUIManager,\n  getConstants(): Object {\n    return getConstants();\n  },\n  getViewManagerConfig: function(viewManagerName: string): any {\n    if (\n      viewManagerConfigs[viewManagerName] === undefined &&\n      NativeUIManager.getConstantsForViewManager\n    ) {\n      try {\n        viewManagerConfigs[\n          viewManagerName\n        ] = NativeUIManager.getConstantsForViewManager(viewManagerName);\n      } catch (e) {\n        viewManagerConfigs[viewManagerName] = null;\n      }\n    }\n\n    const config = viewManagerConfigs[viewManagerName];\n    if (config) {\n      return config;\n    }\n\n    // If we're in the Chrome Debugger, let's not even try calling the sync\n    // method.\n    if (!global.nativeCallSyncHook) {\n      return config;\n    }\n\n    if (\n      NativeUIManager.lazilyLoadView &&\n      !triedLoadingConfig.has(viewManagerName)\n    ) {\n      const result = NativeUIManager.lazilyLoadView(viewManagerName);\n      triedLoadingConfig.add(viewManagerName);\n      if (result.viewConfig) {\n        getConstants()[viewManagerName] = result.viewConfig;\n        lazifyViewManagerConfig(viewManagerName);\n      }\n    }\n\n    return viewManagerConfigs[viewManagerName];\n  },\n};\n\n// TODO (T45220498): Remove this.\n// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`\n// instead of `UIManager.getViewManagerConfig()` off UIManager.js.\n// This is a workaround for now.\n// $FlowFixMe\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName) {\n  const viewConfig = getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const constants = {};\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n        return constants;\n      },\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const commands = {};\n        let index = 0;\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n        return commands;\n      },\n    });\n  }\n}\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(getConstants()).forEach(viewName => {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: () => NativeUIManager.getConstantsForViewManager(viewManagerName),\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(getConstants()).forEach(viewManagerName => {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: () => {\n          console.warn(\n            `Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` +\n              `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`,\n          );\n\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        },\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;\n"]},"metadata":{},"sourceType":"module"}